
3)

    List = { {'M','A','T','L','A','B'},{' '},{'i','s'}, {' '}, {'a'}, {' '}, {'s','t','r','a','n','g','e'},{', '}, {'b','u','t',' '}, {'p','o','p','u','l','a','r'}, {' '}, {'p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'}}; 
for numbers = 1:length(List)
    a = List{numbers};
    for numbers_one = 1:1:length(a)
        fprintf(a{numbers_one});
    end    
end

>> extractLetter
MATLAB is a strange, but popular programming language

4)

    This function runs a for loop, n, which square roots an r value 2.0 and squares the following value for a max of 60 iterations on each respective math operation.
    When you run the code, it outputs a final value of 1 because of the round-off erros in numerical computaiton. In Matlab, the value r becomes exponentially smaller, 
    and then rounds, which in turn the estimated value is squared to a value of 1.
    
5)

    This code runs an initial value eps = 1.0 through a while loop, which when eps + 1.0 is not equal to 1.0, it displays the eps value and then divides the eps value by 2.
    This continues until the eps value becomes infinitessimaly small, in which matlab will round this value to 0, and at this instance, eps will equal to 0. This is make the
    while look break because the statement will be true (1.0 = 1.0 + eps).

6)

    function getLargestPrime(x)
    for i = x:-1:2
        y = isprime(i);
        if y == 1
            disp(i)
            return
        else
            continue
        end
    end
    
    >> getLargestPrime(123)
   113
    
