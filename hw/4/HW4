1)

A.
   function temp = convertTempWhile(InVec, str)
    counter = 1;
    temp_val = size(InVec);
    if strcmp(str,'F2C')
        temp = zeros(size(InVec));
        while temp_val(2) >= counter
            temp(counter) = (InVec(counter) - 32)*(5/9);
            counter = counter + 1;
        end
    elseif strcmp(str,'C2F')
        temp = zeros(size(InVec));
        while temp_val(2) >= counter
            temp(counter) = (InVec(counter)*(9/5)+32);
            counter = counter + 1;
        end
    else
        disp('Error!')
    end
end

>> convertTempWhile(InVec,'C2F')

ans =

  Columns 1 through 7

    -4     5    14    23    32    41    50

  Columns 8 through 13

    59    68    77    86    95   104

>> convertTempWhile(InVec,'F2C')

ans =

  Columns 1 through 4

  -28.8889  -26.1111  -23.3333  -20.5556

  Columns 5 through 8

  -17.7778  -15.0000  -12.2222   -9.4444

  Columns 9 through 12

   -6.6667   -3.8889   -1.1111    1.6667

  Column 13

    4.4444
    
>> convertTempWhile(InVec,'O')
Error!

B.

	function temp = convertTempFor(InVec,str)
    if strcmp(str,'C2F')
        temp = zeros(size(InVec));
        for counter = 1:length(InVec)
            temp(counter) = (InVec(counter)*(9/5)) + 32;
        end
    elseif strcmp(str,'F2C')
        temp = zeros(size(InVec));
        for counter = 1:length(InVec)
            temp(counter) = (InVec(counter) -32)*(5/9);
        end
    else
        disp('Error!')
    end
end

	>> convertTempFor(InVec,'F2C')

ans =

  Columns 1 through 4

  -28.8889  -26.1111  -23.3333  -20.5556

  Columns 5 through 8

  -17.7778  -15.0000  -12.2222   -9.4444

  Columns 9 through 12

   -6.6667   -3.8889   -1.1111    1.6667

  Column 13

    4.4444
	
	>> convertTempFor(InVec,'C2F')

ans =

  Columns 1 through 7

    -4     5    14    23    32    41    50

  Columns 8 through 13

    59    68    77    86    95   104

>> convertTempFor(InVec,'O')
Error!

C.

function temp = convertTempVec(InVec,str)
    if strcmp(str, 'C2F')
        temp = InVec.*(9.0/5.0) + 32.0;
    elseif strcmp(str,'F2C')
        temp = (InVec-32.0)./1.8;
    else
        disp('Error!')
    end
end

>> convertTempVec(InVec,'F2C')

ans =

  Columns 1 through 4

  -28.8889  -26.1111  -23.3333  -20.5556

  Columns 5 through 8

  -17.7778  -15.0000  -12.2222   -9.4444

  Columns 9 through 12

   -6.6667   -3.8889   -1.1111    1.6667

  Column 13

    4.4444

>> convertTempVec(InVec,'C2F')

ans =

  Columns 1 through 7

    -4     5    14    23    32    41    50

  Columns 8 through 13

    59    68    77    86    95   104

>> convertTempVec(InVec,'o')
Error!

2)

function temp = convertTempFor(InVec,str)
    tic
    if strcmp(str,'C2F')
        temp = zeros(size(InVec));
        for counter = 1:length(InVec)
            temp(counter) = (InVec(counter)*(9/5)) + 32;
        end
    elseif strcmp(str,'F2C')
        temp = zeros(size(InVec));
        for counter = 1:length(InVec)
            temp(counter) = (InVec(counter) -32)*(5/9);
        end
    else
        disp('Error!')
    end
    toc
end

>> convertTempFor(InVec,'F2C')
Elapsed time is 0.000798 seconds.

ans =

  Columns 1 through 4

  -28.8889  -26.1111  -23.3333  -20.5556

  Columns 5 through 8

  -17.7778  -15.0000  -12.2222   -9.4444

  Columns 9 through 12

   -6.6667   -3.8889   -1.1111    1.6667

  Column 13

    4.4444

function temp = convertTempWhile(InVec, str)
    tic
    counter = 1;
    temp_val = size(InVec);
    if strcmp(str,'F2C')
        temp = zeros(size(InVec));
        while temp_val(2) >= counter
            temp(counter) = (InVec(counter) - 32)*(5/9);
            counter = counter + 1;
        end
    elseif strcmp(str,'C2F')
        temp = zeros(size(InVec));
        while temp_val(2) >= counter
            temp(counter) = (InVec(counter)*(9/5)+32);
            counter = counter + 1;
        end
    else
        disp('Error!')
    end
    toc
end

>> convertTempWhile(InVec,'F2C')
Elapsed time is 0.001976 seconds.

ans =

  Columns 1 through 4

  -28.8889  -26.1111  -23.3333  -20.5556

  Columns 5 through 8

  -17.7778  -15.0000  -12.2222   -9.4444

  Columns 9 through 12

   -6.6667   -3.8889   -1.1111    1.6667

  Column 13

    4.4444

function temp = convertTempVec(InVec,str)
    tic
    if strcmp(str, 'C2F')
        temp = InVec.*(9.0/5.0) + 32.0;
    elseif strcmp(str,'F2C')
        temp = (InVec-32.0)./1.8;
    else
        disp('Error!')
    end
    toc
end

>> convertTempVec(InVec,'F2C')
Elapsed time is 0.000339 seconds.

ans =

  Columns 1 through 4

  -28.8889  -26.1111  -23.3333  -20.5556

  Columns 5 through 8

  -17.7778  -15.0000  -12.2222   -9.4444

  Columns 9 through 12

   -6.6667   -3.8889   -1.1111    1.6667

  Column 13

    4.4444	

3)

    List = { {'M','A','T','L','A','B'},{' '},{'i','s'}, {' '}, {'a'}, {' '}, {'s','t','r','a','n','g','e'},{', '}, {'b','u','t',' '}, {'p','o','p','u','l','a','r'}, {' '}, {'p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'}}; 
for numbers = 1:length(List)
    a = List{numbers};
    for numbers_one = 1:1:length(a)
        fprintf(a{numbers_one});
    end    
end

>> extractLetter
MATLAB is a strange, but popular programming language

4)

    This function runs a for loop, n, which square roots an r value 2.0 and squares the following value for a max of 60 iterations on each respective math operation.
    When you run the code, it outputs a final value of 1 because of the round-off erros in numerical computaiton. In Matlab, the value r becomes exponentially smaller, 
    and then rounds, which in turn the estimated value is squared to a value of 1.
    
5)

    This code runs an initial value eps = 1.0 through a while loop, which when eps + 1.0 is not equal to 1.0, it displays the eps value and then divides the eps value by 2.
    This continues until the eps value becomes infinitessimaly small, in which matlab will round this value to 0, and at this instance, eps will equal to 0. This is make the
    while look break because the statement will be true (1.0 = 1.0 + eps).

6)

    function getLargestPrime(x)
    for i = x:-1:2
        y = isprime(i);
        if y == 1
            disp(i)
            return
        else
            continue
        end
    end
    
    >> getLargestPrime(123)
   113
   
7)

A.

    function fib()

    n = input('Please enter a non-negative integer or type stop: ','s');
    if strcmp(n,'stop')
        return
    else
        n = str2double(n);
        if isreal(n)
            if n>=0 && round(n)==n
                disp(['fib(',num2str(n),') = ',num2str(getFib(n))]);
                
                f = @() getFib(n);
                disp([ char(9) 'average runtime: ' num2str(timeit(f))]);
                
                fib()
                return
            end
        end
        disp('The input argument is not a non-negative integer!');
        fib()
    end
    
    function fib = getFib(n_int)
        if n_int == 0
            fib = 0;
        elseif n_int == 1
            fib = 1;
        else
            fib = getFib(n_int-1) + getFib(n_int-2);
        end
    end

end

    fib(10) = 55

f =

  function_handle with value:

    @()getFib(n)

	average runtime: 2.7628e-05
    
B.

function fibloop()
    n = input('Please enter a non-negative integer or type stop: ','s');
    if strcmp(n,'stop')
        return    
    else
        n = str2double(n);
        if isreal(n)
            if n>=0 && round(n)==n
                disp(['fib(',num2str(n),') = ',num2str(getFib(n))]);
                f = @() getFib(n);
                disp( [char(9) 'average runtime: ' num2str(timeit(f))]);
            
            fibloop()
            return
            end
        end
        disp('The input argument is not a non-negative integer!');
        fib()
    end
    
    function fib = getFib(n_int)
       num = 0;
       num_two = 1;
       for i = 2:n_int
           fib = num+num_two;
           num=num_two;
           num_two=fib;
       end
    end
   
end

>> fibloop()
Please enter a non-negative integer or type stop: 10
fib(10) = 55
	average runtime: 1.56e-06
Please enter a non-negative integer or type stop: 15
fib(15) = 610
	average runtime: 2.3853e-06
Please enter a non-negative integer or type stop: 20
fib(20) = 6765
	average runtime: 2.2953e-06
Please enter a non-negative integer or type stop: 25
fib(25) = 75025
	average runtime: 3.7945e-06
Please enter a non-negative integer or type stop: 30
fib(30) = 832040
	average runtime: 1.3508e-06
Please enter a non-negative integer or type stop: 35
fib(35) = 9227465
	average runtime: 2.4874e-06
Please enter a non-negative integer or type stop: 
fib(40) = 102334155
	average runtime: 3.4387e-06
Please enter a non-negative integer or type stop: stop

Fibloop is much faster because is doesn't utilize recursions like the other fib code. With the recursion, getFib is called each time to find the fibonacci values, which cause a slowdown, whereas the for loop doesn't require
this step. The for loop will increment and display the values as it runs. This doesn't require the code to keep sending info out to the recursive formula and back in to finally display.

--BONUS--

function fibloopvec()
    n = input('Please enter a non-negative integer or type stop: ','s');
    if strcmp(n,'stop')
        return
    else
        n = str2double(n);
        if isreal(n)
            if n>=0 && round(n)==n
                disp(['fib(',num2str(n),') = ',num2str(getFib(n))]);
                
                f = @() getFib(n);
                disp([ char(9) 'average runtime: ' num2str(timeit(f))]);
                
                return
            end
        end
        disp('The input argument is not a non-negative integer!');
        fibloopvec()
    end
    end
    function fib = getFib(n_int)
        if n_int == 0
        elseif n_int == 1
        else
            FibSeq = zeros(n_int,1);
            FibSeq(1) = 0;
            FibSeq(2) = 1;
            for i = 2:n_int
               FibSeq(i+1) = FibSeq(i) + FibSeq(i-1);
            end
            fib = FibSeq(end);
        end
 end
 
>> fibloopvec()
Please enter a non-negative integer or type stop: 10
fib(10) = 55
	average runtime: 3.8596e-06
	
8)    

A)

function output = timeFib(n)
if ~ischar(n) && isreal(n) && n>=0 && round(n)==n
    output.n = n;
    output.fib = getFib(n);
    output.runtime =  timeit(@() getFib(n));
else
    error('The input argument is not a non-negative integer!');
end
end
 function fib = getFib(n_int)
        if n_int == 0
            fib = 0;
        elseif n_int == 1
            fib = 1;
        else
            fib = getFib(n_int-1) + getFib(n_int-2);
        end
end

ans = 

  struct with fields:

          n: 20
        fib: 6765
    runtime: 7.5726e-04

function output = timeFibLoop(n)
if ~ischar(n) && isreal(n) && n>=0 && round(n)==n
    output.n = n;
    output.fib = getFib(n);
    output.runtime =  timeit(@() getFib(n));
else
    error('The input argument is not a non-negative integer!');
end
end
 function fib = getFib(n_int)
        if n_int == 0
            fib = 0;
        elseif n_int == 1
            fib = 1;
        else
            fib = getFib(n_int-1) + getFib(n_int-2);
        end
end

B)

n = 1:35;
L = length(n);
for index = L:-1:1
    outputTimeFib(index) = timeFib(index);
    outputTimeFibLoop(index) = timeFibLoop(index);
    writetable(struct2table(outputTimeFib),'fibOutput.txt')
    writetable(struct2table(outputTimeFibLoop), 'fibLoopOutput.txt')
end
