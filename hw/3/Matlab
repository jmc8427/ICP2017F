Matlab Homework 3:

1)

	function g = Gaussian(x,y,z)
   		g = (1/((sqrt(2*pi)*(y)))*exp((-1/2)*(((z-x)/(y))^2)));
    		return
	end

	output: 

	Gaussian(0, 2, 1)

	ans =

   	 0.1760

	>> n = normpdf(1,0,2)

	n =

    	0.1760

2)

	function t = Egg(m,p,c,k,t0,tw,ty)
		t = (m^(2/3)*c*(p^(1/3)))/((k*pi^(2))*((4*pi)/3)^(2/3))*log(0.76*((t0-tw)/(ty-tw)));
  	  	return
	end

	output (when t0 = 4):

	>> Gaussian(67,1.038,3.7,.0054,4,100,70)

	ans =

  	396.5763

	output (when t0 = 20):

	>> Gaussian(67,1.038,3.7,.0054,20,100,70)

	ans =

 	 315.2179

3)	
	input:

	function f = get_Polar(inputCartesianStructure)
  	 	inputCartesianStructure.x = input('Enter an x value!');
   	 	inputCartesianStructure.y = input('Enter a y value!');
   	 	f.r = sqrt(inputCartesianStructure.x^2 + inputCartesianStructure.y^2);
    		f.phi = (180/pi)*(acos(inputCartesianStructure.x/f.r));
    		disp(f);
    		return
	end

	output:

	get_Polar()
	Enter an x value!3
	Enter a y value!4
	    r: 5
	    phi: 53.1301


	ans =

	  struct with fields:

	    r: 5
	    phi: 53.1301

	input:

	function g = get_Cart(inputPolarStructure)
	    inputPolarStructure.r = input('Enter an r value!');
	    inputPolarStructure.phi = input('Enter a phi value!');
	    g.x = (inputPolarStructure.r)*(cos(inputPolarStructure.phi));
	    g.y = (inputPolarStructure.r)*(sin(inputPolarStructure.phi));
	    disp(g);
	    return
	end

	output:

	get_Cart()
	Enter an r value!1
	Enter a phi value!pi/4
   	x: 0.7071
    	y: 0.7071


	ans =	

	  struct with fields:

	    x: 0.7071
	    y: 0.7071
	    
4)

input:

function f = getDir(x)
    x = dir('C:\Users\JamesC\Documents\MATLAB\HW3.mat');
    w = size(x);
    len_w = w(1);
    z=0; 
    z = 0;
    for e = 1:len_w
        z = z +x(e).bytes;
    end
    disp([num2str(z), 'bytes'])
end

output:

getDir()
2573bytes

5)

input:

function [t] = Fibonacci(n)
    if isnumeric(n) ==1 & isreal(n) == 1 & n >= 0 == 1 & round(n) == n
        t = Fibonacci(n-1) + Fibonacci(n-2)
    elseif n == 'stop'
        return
    else
        x = input('Enter a real, non-negative integer');
        Fibonacci(n)
end

output:

getFib(4) = 3


6)

input:

function [t] = triangleArea()
x = struct();
y = struct();
x.a = input('xa value: ');
x.b = input('xb value: ');
x.c = input('xc value: ');
y.a = input('ya value: ');
y.b = input('yb value: ');
y.c = input('yc value: ');
t = .5 * abs(x.b*y.c-x.c*y.b-x.a*y.c+x.c*y.a+x.a*y.b-x.b*y.a);
disp(t)
end

output:

triangleArea()
xa value: 1
xb value: 2
xc value: 2
ya value: 1
yb value: 1
yc value: 2
    0.5000


ans =

    0.5000
    
    
7)

input:

function result = is_Prime(x)
    if x < 0 || round(x) ~= x
        x = input('Enter a positive integer')
        isPrime(x)
    elseif x == 0
        disp('False')
    elseif x >= 1 && sum(round(x ./ [1:1:x]) == (x ./ [1:1:x])) == 2
        disp('True')
    else
        disp('False')
end
    
output:

is_Prime(10)
False
>> is_Prime(17)
True


8)

input:

function [y] = genFunc(varargin)
switch nargin
    case 0
        a = 0;
        b = 0;
        c = 0;
    case 1
        a = varargin{1};
        b = 0;
        c = 0;
    case 2
        a = varargin{1};
        b = varargin{2};
        c = 0;
    case 3
        a = varargin{1};
        b = varargin{2};
        c = varargin {3};
    otherwise
    disp('error');
end
function [y] = evalFunc()
x = input('Enter x value: ' );
y = a*x^2 +b*x + c;
end
y = evalFunc();
disp(y)
end

output:

Enter x value: 2
     0


ans =

     0

8)

input:

function [y] = genFunc(varargin)
switch nargin
    case 0
        a = 0;
        b = 0;
        c = 0;
    case 1
        a = varargin{1};
        b = 0;
        c = 0;
    case 2
        a = varargin{1};
        b = varargin{2};
        c = 0;
    case 3
        a = varargin{1};
        b = varargin{2};
        c = varargin {3};
    otherwise
    disp('error');
end
function [y] = evalFunc()
x = input('Enter x value: ' );
y = a*x^2 +b*x + c;
end
y = evalFunc();
disp(y)
end

output:

genFunc()
Enter x value: 0
     0


ans =

     0
     



